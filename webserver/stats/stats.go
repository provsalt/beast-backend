package stats

import (
	"encoding/json"
	"log"
	"net/http"
	"net/http/cookiejar"
	"net/url"
	"time"
)

// Stats is an autogenerated typed data from the API
type Stats struct {
	PoolHashrate        int     `json:"pool_hashrate"`
	RoundHashes         int64   `json:"round_hashes"`
	NetworkHashrate     int64   `json:"network_hashrate"`
	NetworkDifficulty   int64   `json:"network_difficulty"`
	NetworkHeight       int     `json:"network_height"`
	LastTemplateFetched int     `json:"last_template_fetched"`
	LastBlockFound      int     `json:"last_block_found"`
	PoolBlocksFound     int     `json:"pool_blocks_found"`
	PaymentThreshold    float64 `json:"payment_threshold"`
	PoolFee             int     `json:"pool_fee"`
	PoolPort            int     `json:"pool_port"`
	PoolSslPort         int     `json:"pool_ssl_port"`
	AllowSelfSelect     int     `json:"allow_self_select"`
	ConnectedMiners     int     `json:"connected_miners"`
	MinerHashrate       int     `json:"miner_hashrate"`
	MinerHashrateStats  []int   `json:"miner_hashrate_stats"`
	MinerBalance        float64 `json:"miner_balance"`
	WorkerCount         int     `json:"worker_count"`
}

// QueryStats is a handler which just queries directly from the API for data
func QueryStats(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Access-Control-Allow-Origin", "*")
	w.Header().Set("Content-Type", "application/json")
	address := r.URL.Query().Get("address")

	// basic address validation I guess? I'm too lazy to write one again
	if len(address) == 95 || len(address) == 105 {
		cookie, _ := cookiejar.New(nil)
		url, _ := url.Parse("https://xmrvsbeast.com")
		cookie.SetCookies(url, []*http.Cookie{&http.Cookie{Name: "wa", Value: address}})
		c := http.Client{Timeout: 5 * time.Second, Jar: cookie}
		response, err := c.Get("https://xmrvsbeast.com/stats/")
		if err != nil {
			log.Print(err.Error())
			return
		}

		var stats Stats
		err = json.NewDecoder(response.Body).Decode(&stats)
		if err != nil {
			log.Print(err.Error())
			return
		}
		err = json.NewEncoder(w).Encode(&stats)
		if err != nil {
			log.Print(err.Error())
			return
		}
	} else {
		c := http.Client{Timeout: 5 * time.Second}
		response, err := c.Get("https://xmrvsbeast.com/stats/")
		if err != nil {
			log.Print(err.Error())
			return
		}

		var stats Stats
		err = json.NewDecoder(response.Body).Decode(&stats)
		if err != nil {
			log.Print(err.Error())
			return
		}
		err = json.NewEncoder(w).Encode(&stats)
		if err != nil {
			log.Print(err.Error())
			return
		}
	}
}
